import mongoose, { Schema, Document } from "mongoose";

export enum WalletTypeEnum {
  DEPOSIT = "deposit",
  EARNINGS = "earnings",
  FUNDING = "funding",
}
export interface IWallet extends Document {
  /**
   * @description
   * The id of the user account of the Wallet Owner
   */
  owner: mongoose.Types.ObjectId;
  balance: number;
  heldBalance: number;
  type: WalletTypeEnum;
}

const DepositWalletSchema = new Schema<IWallet>(
  {
    owner: { type: Schema.Types.ObjectId, ref: "User", required: true, unique: true },
    balance: { type: Number, default: 0, required: true },
    heldBalance: { type: Number, default: 0, required: true },
    type: { type: String, enum: Object.values(WalletTypeEnum), required: true, default: WalletTypeEnum.DEPOSIT, index: true },
  },
  { timestamps: true }
);

const DepositWalletModel =
  mongoose.models.DepositWallet ||
  mongoose.model<IWallet>("DepositWallet", DepositWalletSchema);

// Earnings Wallet Schema
const EarningsWalletSchema = new Schema<IWallet>(
  {
    owner: { type: Schema.Types.ObjectId, ref: "User", required: true, unique: true },
    balance: { type: Number, default: 0, required: true },
    heldBalance: { type: Number, default: 0, required: true },
    type: { type: String, enum: Object.values(WalletTypeEnum), required: true, default: WalletTypeEnum.EARNINGS, index: true },
  },
  { timestamps: true }
);

const EarningsWalletModel =
  mongoose.models.EarningsWallet ||
  mongoose.model<IWallet>("EarningsWallet", EarningsWalletSchema);

interface IMonnifyAccount {
  bankCode: string;
  bankName: string;
  accountNumber: string;
  accountName: string;
}

// monnify wallet as funding wallet
export interface IFundingWallet extends Document {
  owner: mongoose.Types.ObjectId;
  accountReference: string;
  accountName: string;
  accountEmail: string;
  accounts: IMonnifyAccount[];
  reservationReference: string;
  status: string;
}
// wallet generated by monnify
const FundingWalletSchema = new Schema<IFundingWallet>(
  {
    owner: { type: Schema.Types.ObjectId, ref: "User", required: true },
    accountReference: { type: String, required: true, unique: true },
    accountName: { type: String, required: true },
    accountEmail: { type: String, required: true, unique: true },
    accounts: [
      {
        bankCode: { type: String, required: true },
        bankName: { type: String, required: true },
        accountNumber: {
          type: String,
          required: true,
          minlength: 10,
          maxlength: 10,
        },
        accountName: { type: String, required: true },
      },
    ],
    reservationReference: { type: String, required: true },
    status: { type: String, required: true },
  },
  { timestamps: true }
);

const FundingWalletModel =
  mongoose.models.FundingWallet ||
  mongoose.model<IFundingWallet>("FundingWallet", FundingWalletSchema);

export { DepositWalletModel, EarningsWalletModel, FundingWalletModel };
